name: CI/CD

on:
  release:
    types: [published]
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry --version

      - name: Configure poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Cache poetry virtualenv
        uses: actions/cache@v3
        id: cache
        with:
          path: ./.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --with dev

      - name: Run tests
        run: |
          poetry run black --check .
          poetry run ruff check .
          poetry run pytest -v

  publish:
    needs: test
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    name: Publish release to PyPI
    environment:
      name: pypi
      url: https://pypi.org/p/paginate-fastapi
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry --version
      - name: Configure poetry
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
      - name: Install dependencies
        run: |
          poetry install --no-interaction --with dev
      - name: Build package
        run: |
          poetry build
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
